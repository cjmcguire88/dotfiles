# ███████╗██╗   ██╗███╗   ██╗ ██████╗████████╗██╗ ██████╗ ███╗   ██╗███████╗
# ██╔════╝██║   ██║████╗  ██║██╔════╝╚══██╔══╝██║██╔═══██╗████╗  ██║██╔════╝
# █████╗  ██║   ██║██╔██╗ ██║██║        ██║   ██║██║   ██║██╔██╗ ██║███████╗
# ██╔══╝  ██║   ██║██║╚██╗██║██║        ██║   ██║██║   ██║██║╚██╗██║╚════██║
# ██║     ╚██████╔╝██║ ╚████║╚██████╗   ██║   ██║╚██████╔╝██║ ╚████║███████║
# ╚═╝      ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝

# 01001101 01101001 01101110 01101001 01000010 01100101 01100001 01110011 01110100

#   ___ _ _                _
#  | __(_) |___ ____  _ __| |_ ___ _ __
#  | _|| | / -_|_-< || (_-<  _/ -_) '  \
#  |_| |_|_\___/__/\_, /__/\__\___|_|_|_|
#                  |__/

# extract archives based on filetype
ex () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.tar.xz)    tar xJf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.xz)        xz -d $1     ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

ls-src() {
    exa -a --icons --group-directories-first ~/.build/sources
}

rm-src() {
    if [ -d ~/.build/sources/$1 ]; then
        trash-put ~/.build/sources/$1
        trash-list
    else
        echo -e "\033[1;31m$1 source not found\033[0m"
    fi
}

# zoxide into directory then exa
zls() {
    z $1 && exa --icons --group-directories-first
}

#   _  _     _                  _   _
#  | \| |___| |___ __ _____ _ _| |_(_)_ _  __ _
#  | .` / -_)  _\ V  V / _ \ '_| / / | ' \/ _` |
#  |_|\_\___|\__|\_/\_/\___/_| |_\_\_|_||_\__, |
#                                         |___/

# Display current public IP
myip () {
  res=$(curl -s checkip.dyndns.org | grep -Eo '[0-9\.]+')
  echo -e "Your public IP is: ${echo_bold_green} $res ${echo_normal}"
}

#   __  __        _ _
#  |  \/  |___ __| (_)__ _
#  | |\/| / -_) _` | / _` |
#  |_|  |_\___\__,_|_\__,_|

## YOUTUBE-DL

# download and convert to .mp3 all YT urls in file
ytdl () {
    cat $1 | while read line; do youtube-dl --external-downloader aria2c --external-downloader-args '-c -j 3 -x 3 -s 3 -k 1M' --extract-audio --audio-format mp3 -o "~/Music/%(title)s.%(ext)s" ytsearch:"$line" ;done
}

# download audio only
ytd() {
    youtube-dl --external-downloader aria2c --external-downloader-args '-c -j 3 -x 3 -s 3 -k 1M' --extract-audio --audio-format mp3 -o "~/Music/%(title)s.%(ext)s" ytsearch:"$1"
}

# download video
ytv() {
    youtube-dl --external-downloader aria2c --external-downloader-args '-c -j 3 -x 3 -s 3 -k 1M' -o "~/Videos/%(title)s.%(ext)s" ytsearch:"$1"
}

# play first yt search result in mpv
yt() {
  mpv ytdl://ytsearch:"$*"
}

# play first yt search result in mpv (audio only)
yta() {
  mpv --ytdl-format=bestaudio ytdl://ytsearch:"$*"
}

# arch news
arch_news() {
    w3m https://www.archlinux.org/ | sed -n "/Latest News/,/Older News/p" | head -n -1
}

# fzf: use fd
_fzf_compgen_path() {
    fd --hidden --exclude .git . "$1"
}

_fzf_compgen_dir() {
    fd --type=d --hidden --exclude .git . "$1"
}
